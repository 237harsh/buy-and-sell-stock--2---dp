 int fun(int i,int buy,int n,vector<int>& arr, vector<vector<int>>&dp)
    {
        if(i==n)return 0;
        
     int p;
       if( dp[i][buy]!=-1)
           return dp[i][buy];
        
        if(buy)
         // one buy can not buy the same stock    can buy stock
            p= max( -arr[i]+fun(i+1,0,n,arr,dp),0+fun(i+1,1,n,arr,dp) );
        }
        else //once sell then can buy the stock --not sell cannot buy stock 
            p= max(arr[i]+fun(i+1,1,n,arr,dp),0+fun(i+1,0,n,arr,dp));
     
        return dp[i][buy]=p;
    }
    int maxProfit(vector<int>& arr) {
        int n=arr.size(),m=2;
      /*  vector<vector<int>>dp(n+1,vector<int>(m,-1));
        
       return fun(0,1,n,arr,dp);*/
        
        
        //tabulation 
        
        vector<vector<int>>dp(n+1,vector<int>(m,0));
        
        dp[n][0]=0;
        dp[n][1]=0;
        for(int i=n-1;i>=0;i--)
        {
            for(int buy=0;buy<=1;buy++)
            {
              if(buy)
              {
                  dp[i][buy]=max(-arr[i]+dp[i+1][0],0+dp[i+1][1]);
                  
              }
                else
                 dp[i][buy]=max(arr[i]+dp[i+1][1],0+dp[i+1][0]);   
            }
        }
       return dp[0][1];
        
    }
};
